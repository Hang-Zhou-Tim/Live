dataSources:
  user_master: ##New Logic Master Source
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://hang.db:8808/live_user?useUnicode=true&characterEncoding=utf8
    username: hang
    password: ZH131314

  user_slave0: ##New Logic Slave Source
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://hang.db:8809/live_user?useUnicode=true&characterEncoding=utf8
    username: hang
    password: ZH131314

rules:
  - !READWRITE_SPLITTING
    dataSources:
      user_ds:
        staticStrategy:
          writeDataSourceName: user_master
          readDataSourceNames:
            - user_slave0
  - !SINGLE # Rules for Single Table
    defaultDataSource: user_ds # Default DB source
  - !SHARDING # Rules for multiple table
    tables:
      t_user: #Logical Tables
        actualDataNodes: user_ds.t_user_${(0..99).collect(){it.toString().padLeft(2,'0')}}
        tableStrategy:
          standard:
            shardingColumn: user_id
            shardingAlgorithmName: t_user-inline # Define sharding algorithm name
      t_user_tag: #Logical Tables
        actualDataNodes: user_ds.t_user_tag_${(0..99).collect(){it.toString().padLeft(2,'0')}}
        tableStrategy:
          standard:
            shardingColumn: user_id
            shardingAlgorithmName: t_user_tag-inline # Define sharding algorithm name

    shardingAlgorithms: # Define sharding algorithm for the name that is used above
      t_user-inline:
        type: INLINE
        props:
          algorithm-expression: t_user_${(user_id % 100).toString().padLeft(2,'0')}
      t_user_tag-inline:
        type: INLINE
        props:
          algorithm-expression: t_user_tag_${(user_id % 100).toString().padLeft(2,'0')}

props:
  sql-show: true
